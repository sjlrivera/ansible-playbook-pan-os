---
# Script Name: Automate PAN-OS Upgrade - High-Availability (HA Pair)
# Author: Stephen John Rivera (Pen) 
# GitHub: https://github.com/sjlrivera/ansible-playbook-panos/
# Date: October 27, 2023
# Description: This script does something amazing and useful. It will automate boring task PAN-OS upgrade.

# Credits:
# - Thanks to GNOC individual contirbutors to support my ideas.

- name: Automate PAN-OS Upgrade - HA Pair 
  hosts: ha_firewall
  connection: local
  gather_facts: false

  vars_prompt:
  - name: user
    prompt: Username
    private: false
  - name: pass
    prompt: Password
    private: true
    unsafe: true
  - name: target_software_version
    prompt: Target software version
    private: false
  - name: download_target_software_version
    prompt: Download target software version? [y/n] by default
    private: false
    default: 'y'
  - name: install_target_software_version
    prompt: Install target software version? [y/n] by default
    private: false
    default: 'y'
  - name: backup_config
    prompt: Do you want to backup running config? [y/n] by default
    private: false
    default: 'y'
  - name: reboot_option
    prompt: Do you want to reboot after install? [y/n] by default
    private: false
    default: 'n'

  vars:
    primary:
      ip_address: '{{primary_ip_address}}'
      username: '{{user}}'
      password: '{{pass}}'   
    secondary:
      ip_address: '{{secondary_ip_address}}'
      username: '{{user}}'
      password: '{{pass}}'    

    # backup_config - Create a backup of the currently running config before upgrading on both devices.
    backup_config: true

    # pause_mid_upgrade - Optionally pause for additional verification during upgrade.  This playbook will perform
    #                     basic checks for HA status and session sync, but this will wait for manual verification before
    #                     upgrading the secondary firewall.
    pause_mid_upgrade: false

  collections:
    - paloaltonetworks.panos

  tasks:
    - name: Check Current Software Version (Primary)
      panos_facts:
        provider: '{{primary}}'
        gather_subset: ['system']
      register: result_current_primary

    - name: Check Current Software Version (Secondary)
      panos_facts:
        provider: '{{secondary}}'
        gather_subset: ['system']
      register: result_current_secondary

    - debug:
        msg: '({{result_current_primary.ansible_facts.ansible_net_hostname}}) is current software version: ({{result_current_primary.ansible_facts.ansible_net_version}}) with uptime ({{result_current_primary.ansible_facts.ansible_net_uptime}})'

    - debug:
        msg: '({{result_current_secondary.ansible_facts.ansible_net_hostname}}) is current software version: ({{result_current_secondary.ansible_facts.ansible_net_version}}) with uptime ({{result_current_secondary.ansible_facts.ansible_net_uptime}})'

    - name: Backup Device Running Configuration (Primary)
      panos_op:
        provider: '{{primary}}'
        cmd: 'save config to {{primary_ip_address}}-{{result_current_primary.ansible_facts.ansible_net_version}}.xml'
      when: backup_config == 'y'

    - name: Backup Device Running Configuration (Secondary)
      panos_op:
        provider: '{{secondary}}'
        cmd: 'save config to {{secondary_ip_address}}-{{result_current_secondary.ansible_facts.ansible_net_version}}.xml'
      when: backup_config == 'y'

    - name: Export Snapshot Configuration {{result_current_primary.ansible_facts.ansible_net_hostname}} (Primary) in Control Node 
      panos_export:
        provider: '{{primary}}'
        category: 'configuration'
        filename: '{{primary_ip_address}}-{{result_current_primary.ansible_facts.ansible_net_version}}.xml'
      when: backup_config == 'y'

    - name: Export Snapshot Configuration {{result_current_secondary.ansible_facts.ansible_net_hostname}} (Secondary) in Control Node 
      panos_export:
        provider: '{{secondary}}'
        category: 'configuration'
        filename: '{{secondary_ip_address}}-{{result_current_secondary.ansible_facts.ansible_net_version}}.xml'
      when: backup_config == 'y'

    - name: 'Download Target Software Version: ({{target_software_version}}) and Sync to Peer'
      panos_software:
        provider: '{{primary}}'
        version: '{{target_software_version}}'
        download: '{{download_target_software_version}}'
        sync_to_peer: true
        timeout: 7200
        install: false

    - name: 'High-Availability: Suspend Device {{result_current_primary.ansible_facts.ansible_net_hostname}} (Primary)'
      panos_op:
        provider: '{{primary}}'
        cmd: 'request high-availability state suspend'

    - name: Check that secondary is now active
      panos_op:
        provider: '{{secondary}}'
        cmd: 'show high-availability state'
      register: secondary_active
      retries: 10
      delay: 30
      until: ( secondary_active.stdout | from_json).response.result.group["local-info"].state == 'active' and
             ( secondary_active.stdout | from_json).response.result.group["peer-info"].state == 'suspended' and
             ( secondary_active.stdout | from_json).response.result.group["peer-info"]["state-reason"] == 'User requested' # yamllint disable-line

    - name: 'Target Software Version: ({{target_software_version}}) | Install [{{install_target_software_version}}] | Reboot [{{reboot_option}}] (Primary)'
      panos_software:
        provider: '{{primary}}'
        version: '{{target_software_version}}'
        download: false
        restart: '{{reboot_option}}'
        timeout: 7200
        install: '{{install_target_software_version}}'

    - name: Pause Reboot in 30 Seconds
      ansible.builtin.pause:
        seconds: 30

    - name: Check Device Status (Primary)
      panos_op:
        provider: '{{primary}}'
        cmd: 'show chassis-ready'
      changed_when: false
      register: result
      until: result is not failed and (result.stdout | from_json).response.result == 'yes'
      retries: 60
      delay: 60

    - name: Check Sync State (Primary)
      panos_op:
        provider: '{{primary}}'
        cmd: 'show high-availability state'
      register: primary_state_sync
      retries: 10
      delay: 30
      until: '"state" in ( primary_state_sync.stdout | from_json).response.result.group["local-info"] and
             ( primary_state_sync.stdout | from_json).response.result.group["local-info"].state == "passive" and
             ( primary_state_sync.stdout | from_json).response.result.group["local-info"]["state-sync"] == "Complete"'

    - name: Pause for Verification
      ansible.builtin.pause:
        prompt: 'Primary upgrade complete. Pausing for verification.'
      when: pause_mid_upgrade

    - name: 'High-Availability: Suspend Device {{result_current_secondary.ansible_facts.ansible_net_hostname}} (Secondary)'
      panos_op:
        provider: '{{secondary}}'
        cmd: 'request high-availability state suspend'

    - name: Check that Primary is Now Active
      panos_op:
        provider: '{{primary}}'
        cmd: 'show high-availability state'
      register: primary_active
      retries: 10
      delay: 30
      until: ( primary_active.stdout | from_json).response.result.group["local-info"].state == 'active' and
             ( primary_active.stdout | from_json).response.result.group["peer-info"].state == 'suspended' and
             ( primary_active.stdout | from_json).response.result.group["peer-info"]["state-reason"] == 'User requested'

    - name: 'Target Software Version: ({{target_software_version}}) | Install [{{install_target_software_version}}] | Reboot [{{reboot_option}}] (Secondary)'
      panos_software:
        provider: '{{secondary}}'
        version: '{{target_software_version}}'
        download: false
        restart: '{{reboot_option}}'
        timeout: 7200
        install: '{{install_target_software_version}}'

    - name: Pause Reboot in 30 Seconds
      ansible.builtin.pause:
        seconds: 30

    - name: Check Device Status (Secondary)
      panos_op:
        provider: '{{secondary}}'
        cmd: 'show chassis-ready'
      changed_when: false
      register: result
      until: result is not failed and (result.stdout | from_json).response.result == 'yes'
      retries: 60
      delay: 60

    - name: Check Sync State (Secondary)
      panos_op:
        provider: '{{secondary}}'
        cmd: 'show high-availability state'
      register: secondary_state_sync
      retries: 10
      delay: 30
      until: '"state" in ( secondary_state_sync.stdout | from_json).response.result.group["local-info"] and
             ( secondary_state_sync.stdout | from_json).response.result.group["local-info"].state == "passive" and
             ( secondary_state_sync.stdout | from_json).response.result.group["local-info"]["state-sync"] == "Complete"'

    - name: Check Latest Software Version (Primary)
      panos_facts:
        provider: '{{primary}}'
        gather_subset: ['system']
      register: result_latest_primary
      when: reboot_option == 'y'

    - name: Check Latest Software Version (Secondary)
      panos_facts:
        provider: '{{secondary}}'
        gather_subset: ['system']
      register: result_latest_secondary
      when: reboot_option == 'y'

    - debug:
        msg: '({{result_latest_primary.ansible_facts.ansible_net_hostname}}) is current latest software version: ({{result_latest_primary.ansible_facts.ansible_net_version}}) with uptime ({{result_latest_primary.ansible_facts.ansible_net_uptime}})'
      when: reboot_option == 'y'

    - debug:
        msg: '({{result_latest_secondary.ansible_facts.ansible_net_hostname}}) is current latest software version: ({{result_latest_secondary.ansible_facts.ansible_net_version}}) with uptime ({{result_latest_secondary.ansible_facts.ansible_net_uptime}})'
      when: reboot_option == 'y'
